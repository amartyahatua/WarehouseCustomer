import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;

public class RandomID {


	public static void main(String args[])
	{
		//IDgeneration rand = new IDgeneration();
		int range = 20;
		
		
		/*for(int t=0; t<=0 ; t++ )
		{
			int s= rand.ID(range);

			System.out.println(s);
		}*/

		
		
		
		
		
		//addCustomerId();
		
		
		ArrayList<String> customerIdList = new ArrayList<>();
		ArrayList<String> customerCDIdList = new ArrayList<>();
		ArrayList<String> customerCWIdList = new ArrayList<>();
		ArrayList<String> customerHWIdList = new ArrayList<>();
		ArrayList<String> customerHDIdList = new ArrayList<>();
		ArrayList<Integer> listamount = new ArrayList<>();
		ArrayList<String> listdate = new ArrayList<>();
		ArrayList<String> listdata = new ArrayList<>();
		
		
		String id = null;
		final String COMMA_DELIMITER = ",";
		BufferedReader br1 = null;
		
		int hamountleft= 1000000;
		int hamountright = 9999999;
		
		try {
			br1 = new BufferedReader(new FileReader("C:\\Users\\heena\\Downloads\\customer.csv"));
			br1.readLine();
			String line = "";
			while ((line = br1.readLine()) != null) 
			{
				String[] employeeDetails = line.split(COMMA_DELIMITER);
				if(employeeDetails.length > 0 )
				{
					customerIdList.add(employeeDetails[0]);
					customerCDIdList.add(employeeDetails[1]);
					customerCWIdList.add(employeeDetails[2]);
					customerHWIdList.add(employeeDetails[3]);
					customerHDIdList.add(employeeDetails[4]);
					
					//id = db.save(td).getId();
				}
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
		
		/*//H_DATE
		Long max =0L;
        Long min =100000000000L;
        //Use the date format that best suites you
        SimpleDateFormat spf = new SimpleDateFormat("dd/MM/yyyy");

        for (int i = 0; i <= 10; i++) {
            Random r = new Random();
            Long randomLong=(r.nextLong() % (max - min)) + min;
            Date dt =new Date(randomLong);
            //System.out.println("Generated Long:"+ randomLong);
            listdate.add(spf.format(dt));

        }
	*/
		
		
//HDATE
		int datel = 1;
	    int dater = 31;
	    int monthl = 1;
	    int monthr = 12;
	    int yearl= 1900;
	    int yearr = 3917;
	    int date;
	    int month;
	    int year;
	    int finalD;
	    String dateY = "";
		for( int z=0 ; z<=350 ; z++)
		{
			
			date =  ID(dater);
			month = ID(monthr);
			year = ID(100)+1900;
			
			finalD = year
			
			String s = "0";
			String monS, dateS;
			if (date<10)
			{
				String da = Integer.toString(date);	
				 dateS= s.concat(da);
				
			}
			else
			{
				 dateS = Integer.toString(date);	
			}
        if(month<10)
         {
			String mon = Integer.toString(month);
			 monS = s.concat(mon);
			
         }
        else
        {
        	 monS = Integer.toString(month);
        }
        
			String yearS = Integer.toString(year);
			dateY = dateS+monS+yearS;
			//dateY.concat(Integer.toString(year));
			listdate.add(dateY);
		}

		

//H_amount
		 for( int j=0 ; j<=350 ; j++)
			{
				Integer generatedamt = (int) (hamountleft + (int) (Math.random() * (hamountright - hamountleft)));
				System.out.println( generatedamt); 
				listamount.add(generatedamt);

			}
		 
//H_DATA
		 String uuid ;
			for(int d=0; d<=350; d++)
			{
			 uuid = UUID.randomUUID().toString();
	         listdata.add(uuid);
			}
		
		
		boolean flag=true;


	BufferedWriter br = null;
	try {
		br = new BufferedWriter(new FileWriter("His.csv"));
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	StringBuilder sb = new StringBuilder();
	
	List<String> column_names = new ArrayList<>(Arrays.asList("H_C_ID","H_C_D_ID", "H_C_W_ID" , "H_D_ID" , "H_W_ID" ,"H_Date" , "H_amount","H_Data" ));
	
	Iterator column_names_iterator = column_names.iterator();
	if (flag)
	{
		while (column_names_iterator.hasNext()) {
			sb.append(column_names_iterator.next());
			sb.append(",");
	    	}
		sb.append("\n");
		flag=false;
	}
	

	
	
	Iterator id_iterator = customerIdList.iterator();
	Iterator man_iterator =customerCDIdList .iterator();
	Iterator street_1_iterator = customerCWIdList.iterator();
	Iterator street_2_iterator = customerHWIdList.iterator();
	Iterator city_iterator =  customerHDIdList.iterator();
	//Iterator state_iterator = list_state.iterator();
	Iterator date_iterator =  listamount.iterator();
	Iterator amount_iterator =  listdate.iterator();
	Iterator data_iterator =  listdata.iterator();
	
	
	while (id_iterator.hasNext() && street_1_iterator.hasNext()) {
		sb.append(id_iterator.next());
		sb.append(",");
	    sb.append(man_iterator.next());
		sb.append(",");
	    sb.append(street_1_iterator.next());
	    sb.append(",");
	    sb.append(street_2_iterator.next());
	    sb.append(",");
	    sb.append(city_iterator.next());
	    sb.append(",");
	    sb.append(date_iterator.next());
	    sb.append(",");
	    sb.append(amount_iterator.next());
	    sb.append(",");
	    sb.append(data_iterator.next());
	// sb.append(",");
	    //sb.append(state_iterator.next());	
	    sb.append("\n");
	}
	
	try {
		br.write(sb.toString());
		br.close();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	

		 
		
		

	}


	
		


	static int ID(int range)
	{
		int Left = 1;
		int Right =range - Left ;

		int R  =(int)( Left + (int) (Math.random()*(Right - Left)));

		return R;

	}
}
